generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RedeemLicense {
  id                  Int                 @id @default(autoincrement())
  code                String              @db.VarChar(255)
  purchased_at        DateTime
  product_id          String
  product_name        String
  product_permalink   String
  variants            String?
  price               Int
  quantity            Int
  currency            String
  recurrence          String
  status              RedeemLicenseStatus @default(enable)
  discord_id          String
  discord_grant_roles String[]
  subscription_id     String?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  subscription        Subscription?       @relation(fields: [subscription_id], references: [subscription_id])

  @@unique([code, discord_id], name: "code_discord_id")
}

model Subscription {
  id                             Int                @id @default(autoincrement())
  subscription_id                String             @unique
  product_id                     String
  product_name                   String
  // user_id                        String
  // purchase_ids                   String[]
  started_at                     DateTime
  recurrence                     String
  license_key                    String             @db.VarChar(255)
  charge_occurrence_count        Int?
  cancelled_at                   DateTime?
  ended_at                       DateTime?
  failed_at                      DateTime?
  free_trial_ends_at             DateTime?
  user_requested_cancellation_at DateTime?
  status                         SubscriptionStatus @default(alive)
  created_at                     DateTime           @default(now())
  updated_at                     DateTime           @updatedAt
  redeemLicenses                 RedeemLicense[]
}

enum RedeemLicenseStatus {
  enable
  disabled
}

enum SubscriptionStatus {
  alive
  pending_cancellation
  pending_failure
  failed_payment
  fixed_subscription_period_ended
  cancelled
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
